// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/drive.proto

package drive_pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Contract struct {
	Drive                []byte   `protobuf:"bytes,1,opt,name=drive,proto3" json:"drive,omitempty"`
	Owner                []byte   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Replicators          [][]byte `protobuf:"bytes,3,rep,name=replicators,proto3" json:"replicators,omitempty"`
	Root                 []byte   `protobuf:"bytes,4,opt,name=root,proto3" json:"root,omitempty"`
	Duration             int64    `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	BillingPrice         int64    `protobuf:"varint,6,opt,name=billingPrice,proto3" json:"billingPrice,omitempty"`
	BillingPeriod        int64    `protobuf:"varint,7,opt,name=billingPeriod,proto3" json:"billingPeriod,omitempty"`
	Created              int64    `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Space                int64    `protobuf:"varint,9,opt,name=space,proto3" json:"space,omitempty"`
	PayedReplicas        uint32   `protobuf:"varint,10,opt,name=payedReplicas,proto3" json:"payedReplicas,omitempty"`
	MinReplicators       uint32   `protobuf:"varint,11,opt,name=minReplicators,proto3" json:"minReplicators,omitempty"`
	PercentApprovers     uint32   `protobuf:"varint,12,opt,name=percentApprovers,proto3" json:"percentApprovers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_412ba19c731df5fd, []int{0}
}
func (m *Contract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(m, src)
}
func (m *Contract) XXX_Size() int {
	return m.Size()
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

func (m *Contract) GetDrive() []byte {
	if m != nil {
		return m.Drive
	}
	return nil
}

func (m *Contract) GetOwner() []byte {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Contract) GetReplicators() [][]byte {
	if m != nil {
		return m.Replicators
	}
	return nil
}

func (m *Contract) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *Contract) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Contract) GetBillingPrice() int64 {
	if m != nil {
		return m.BillingPrice
	}
	return 0
}

func (m *Contract) GetBillingPeriod() int64 {
	if m != nil {
		return m.BillingPeriod
	}
	return 0
}

func (m *Contract) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Contract) GetSpace() int64 {
	if m != nil {
		return m.Space
	}
	return 0
}

func (m *Contract) GetPayedReplicas() uint32 {
	if m != nil {
		return m.PayedReplicas
	}
	return 0
}

func (m *Contract) GetMinReplicators() uint32 {
	if m != nil {
		return m.MinReplicators
	}
	return 0
}

func (m *Contract) GetPercentApprovers() uint32 {
	if m != nil {
		return m.PercentApprovers
	}
	return 0
}

type Invite struct {
	Drive                []byte   `protobuf:"bytes,1,opt,name=drive,proto3" json:"drive,omitempty"`
	Owner                []byte   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Duration             int64    `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	BillingPrice         int64    `protobuf:"varint,4,opt,name=billingPrice,proto3" json:"billingPrice,omitempty"`
	BillingPeriod        int64    `protobuf:"varint,5,opt,name=billingPeriod,proto3" json:"billingPeriod,omitempty"`
	Space                int64    `protobuf:"varint,6,opt,name=space,proto3" json:"space,omitempty"`
	PayedReplicas        uint32   `protobuf:"varint,7,opt,name=payedReplicas,proto3" json:"payedReplicas,omitempty"`
	MinReplicators       uint32   `protobuf:"varint,8,opt,name=minReplicators,proto3" json:"minReplicators,omitempty"`
	PercentApprovers     uint32   `protobuf:"varint,9,opt,name=percentApprovers,proto3" json:"percentApprovers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Invite) Reset()         { *m = Invite{} }
func (m *Invite) String() string { return proto.CompactTextString(m) }
func (*Invite) ProtoMessage()    {}
func (*Invite) Descriptor() ([]byte, []int) {
	return fileDescriptor_412ba19c731df5fd, []int{1}
}
func (m *Invite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Invite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Invite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Invite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Invite.Merge(m, src)
}
func (m *Invite) XXX_Size() int {
	return m.Size()
}
func (m *Invite) XXX_DiscardUnknown() {
	xxx_messageInfo_Invite.DiscardUnknown(m)
}

var xxx_messageInfo_Invite proto.InternalMessageInfo

func (m *Invite) GetDrive() []byte {
	if m != nil {
		return m.Drive
	}
	return nil
}

func (m *Invite) GetOwner() []byte {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Invite) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Invite) GetBillingPrice() int64 {
	if m != nil {
		return m.BillingPrice
	}
	return 0
}

func (m *Invite) GetBillingPeriod() int64 {
	if m != nil {
		return m.BillingPeriod
	}
	return 0
}

func (m *Invite) GetSpace() int64 {
	if m != nil {
		return m.Space
	}
	return 0
}

func (m *Invite) GetPayedReplicas() uint32 {
	if m != nil {
		return m.PayedReplicas
	}
	return 0
}

func (m *Invite) GetMinReplicators() uint32 {
	if m != nil {
		return m.MinReplicators
	}
	return 0
}

func (m *Invite) GetPercentApprovers() uint32 {
	if m != nil {
		return m.PercentApprovers
	}
	return 0
}

func init() {
	proto.RegisterType((*Contract)(nil), "drive_pb.Contract")
	proto.RegisterType((*Invite)(nil), "drive_pb.Invite")
}

func init() { proto.RegisterFile("pb/drive.proto", fileDescriptor_412ba19c731df5fd) }

var fileDescriptor_412ba19c731df5fd = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4e, 0xc2, 0x30,
	0x18, 0x80, 0x2d, 0x83, 0x31, 0xca, 0x20, 0xa4, 0xf1, 0xd0, 0x70, 0x58, 0x16, 0x62, 0xcc, 0x62,
	0x22, 0x1c, 0x7c, 0x02, 0xf5, 0xe4, 0xcd, 0xec, 0x05, 0xcc, 0xd6, 0xd5, 0xd9, 0x04, 0xda, 0xe6,
	0x5f, 0xc1, 0xf8, 0x26, 0x3e, 0x83, 0x4f, 0xe2, 0xd1, 0x47, 0x30, 0xf8, 0x1a, 0x1e, 0x0c, 0xff,
	0x02, 0x01, 0x25, 0x8a, 0xb7, 0x7e, 0x5f, 0xff, 0x36, 0xeb, 0x97, 0xd1, 0xbe, 0xcd, 0x27, 0x05,
	0xa8, 0x85, 0x1c, 0x5b, 0x30, 0xce, 0xb0, 0x00, 0xe1, 0xce, 0xe6, 0xc3, 0xf3, 0x52, 0xb9, 0x87,
	0x79, 0x3e, 0x16, 0x66, 0x36, 0x29, 0x4d, 0x69, 0x26, 0x38, 0x90, 0xcf, 0xef, 0x91, 0x10, 0x70,
	0x55, 0x1f, 0x1c, 0x7d, 0x36, 0x68, 0x70, 0x6d, 0xb4, 0x83, 0x4c, 0x38, 0x76, 0x4c, 0x5b, 0x78,
	0x0f, 0x27, 0x31, 0x49, 0xc2, 0xb4, 0x86, 0x95, 0x35, 0x8f, 0x5a, 0x02, 0x6f, 0xd4, 0x16, 0x81,
	0xc5, 0xb4, 0x0b, 0xd2, 0x4e, 0x95, 0xc8, 0x9c, 0x81, 0x8a, 0x7b, 0xb1, 0x97, 0x84, 0xe9, 0xb6,
	0x62, 0x8c, 0x36, 0xc1, 0x18, 0xc7, 0x9b, 0x78, 0x0c, 0xd7, 0x6c, 0x48, 0x83, 0x62, 0x0e, 0x99,
	0x53, 0x46, 0xf3, 0x56, 0x4c, 0x12, 0x2f, 0xdd, 0x30, 0x1b, 0xd1, 0x30, 0x57, 0xd3, 0xa9, 0xd2,
	0xe5, 0x2d, 0x28, 0x21, 0xb9, 0x8f, 0xfb, 0x3b, 0x8e, 0x9d, 0xd0, 0xde, 0x9a, 0x25, 0x28, 0x53,
	0xf0, 0x36, 0x0e, 0xed, 0x4a, 0xc6, 0x69, 0x5b, 0x80, 0xcc, 0x9c, 0x2c, 0x78, 0x80, 0xfb, 0x6b,
	0x5c, 0xbd, 0xa5, 0xb2, 0x99, 0x90, 0xbc, 0x83, 0xbe, 0x86, 0xd5, 0xad, 0x36, 0x7b, 0x92, 0x45,
	0x5a, 0x7f, 0x7d, 0xc5, 0x69, 0x4c, 0x92, 0x5e, 0xba, 0x2b, 0xd9, 0x29, 0xed, 0xcf, 0x94, 0x4e,
	0xb7, 0x1e, 0xdd, 0xc5, 0xb1, 0x6f, 0x96, 0x9d, 0xd1, 0x81, 0x95, 0x20, 0xa4, 0x76, 0x97, 0xd6,
	0x82, 0x59, 0x48, 0xa8, 0x78, 0x88, 0x93, 0x3f, 0xfc, 0xe8, 0xa5, 0x41, 0xfd, 0x1b, 0xbd, 0x50,
	0x4e, 0xfe, 0x2b, 0xfe, 0x76, 0x46, 0xef, 0x8f, 0x8c, 0xcd, 0x43, 0x32, 0xb6, 0xf6, 0x65, 0xdc,
	0xc4, 0xf2, 0x7f, 0x8d, 0xd5, 0x3e, 0x2c, 0x56, 0x70, 0x70, 0xac, 0xce, 0xfe, 0x58, 0x57, 0x83,
	0xd7, 0x65, 0x44, 0xde, 0x96, 0x11, 0x79, 0x5f, 0x46, 0xe4, 0xf9, 0x23, 0x3a, 0xca, 0x7d, 0xfc,
	0x89, 0x2f, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xe6, 0x76, 0x67, 0x0f, 0x03, 0x00, 0x00,
}

func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Drive) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDrive(dAtA, i, uint64(len(m.Drive)))
		i += copy(dAtA[i:], m.Drive)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDrive(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if len(m.Replicators) > 0 {
		for _, b := range m.Replicators {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDrive(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Root) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDrive(dAtA, i, uint64(len(m.Root)))
		i += copy(dAtA[i:], m.Root)
	}
	if m.Duration != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.Duration))
	}
	if m.BillingPrice != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.BillingPrice))
	}
	if m.BillingPeriod != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.BillingPeriod))
	}
	if m.Created != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.Created))
	}
	if m.Space != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.Space))
	}
	if m.PayedReplicas != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.PayedReplicas))
	}
	if m.MinReplicators != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.MinReplicators))
	}
	if m.PercentApprovers != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.PercentApprovers))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Invite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Invite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Drive) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDrive(dAtA, i, uint64(len(m.Drive)))
		i += copy(dAtA[i:], m.Drive)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDrive(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if m.Duration != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.Duration))
	}
	if m.BillingPrice != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.BillingPrice))
	}
	if m.BillingPeriod != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.BillingPeriod))
	}
	if m.Space != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.Space))
	}
	if m.PayedReplicas != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.PayedReplicas))
	}
	if m.MinReplicators != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.MinReplicators))
	}
	if m.PercentApprovers != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.PercentApprovers))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintDrive(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Drive)
	if l > 0 {
		n += 1 + l + sovDrive(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovDrive(uint64(l))
	}
	if len(m.Replicators) > 0 {
		for _, b := range m.Replicators {
			l = len(b)
			n += 1 + l + sovDrive(uint64(l))
		}
	}
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovDrive(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovDrive(uint64(m.Duration))
	}
	if m.BillingPrice != 0 {
		n += 1 + sovDrive(uint64(m.BillingPrice))
	}
	if m.BillingPeriod != 0 {
		n += 1 + sovDrive(uint64(m.BillingPeriod))
	}
	if m.Created != 0 {
		n += 1 + sovDrive(uint64(m.Created))
	}
	if m.Space != 0 {
		n += 1 + sovDrive(uint64(m.Space))
	}
	if m.PayedReplicas != 0 {
		n += 1 + sovDrive(uint64(m.PayedReplicas))
	}
	if m.MinReplicators != 0 {
		n += 1 + sovDrive(uint64(m.MinReplicators))
	}
	if m.PercentApprovers != 0 {
		n += 1 + sovDrive(uint64(m.PercentApprovers))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Invite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Drive)
	if l > 0 {
		n += 1 + l + sovDrive(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovDrive(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovDrive(uint64(m.Duration))
	}
	if m.BillingPrice != 0 {
		n += 1 + sovDrive(uint64(m.BillingPrice))
	}
	if m.BillingPeriod != 0 {
		n += 1 + sovDrive(uint64(m.BillingPeriod))
	}
	if m.Space != 0 {
		n += 1 + sovDrive(uint64(m.Space))
	}
	if m.PayedReplicas != 0 {
		n += 1 + sovDrive(uint64(m.PayedReplicas))
	}
	if m.MinReplicators != 0 {
		n += 1 + sovDrive(uint64(m.MinReplicators))
	}
	if m.PercentApprovers != 0 {
		n += 1 + sovDrive(uint64(m.PercentApprovers))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDrive(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDrive(x uint64) (n int) {
	return sovDrive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDrive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drive", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDrive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Drive = append(m.Drive[:0], dAtA[iNdEx:postIndex]...)
			if m.Drive == nil {
				m.Drive = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDrive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicators", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDrive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replicators = append(m.Replicators, make([]byte, postIndex-iNdEx))
			copy(m.Replicators[len(m.Replicators)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDrive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = append(m.Root[:0], dAtA[iNdEx:postIndex]...)
			if m.Root == nil {
				m.Root = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingPrice", wireType)
			}
			m.BillingPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillingPrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingPeriod", wireType)
			}
			m.BillingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillingPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			m.Space = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Space |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayedReplicas", wireType)
			}
			m.PayedReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayedReplicas |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinReplicators", wireType)
			}
			m.MinReplicators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinReplicators |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentApprovers", wireType)
			}
			m.PercentApprovers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PercentApprovers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDrive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDrive
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDrive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Invite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDrive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Invite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Invite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drive", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDrive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Drive = append(m.Drive[:0], dAtA[iNdEx:postIndex]...)
			if m.Drive == nil {
				m.Drive = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDrive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingPrice", wireType)
			}
			m.BillingPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillingPrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingPeriod", wireType)
			}
			m.BillingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillingPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			m.Space = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Space |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayedReplicas", wireType)
			}
			m.PayedReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayedReplicas |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinReplicators", wireType)
			}
			m.MinReplicators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinReplicators |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentApprovers", wireType)
			}
			m.PercentApprovers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PercentApprovers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDrive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDrive
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDrive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDrive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDrive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDrive
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthDrive
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDrive
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDrive(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthDrive
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDrive = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDrive   = fmt.Errorf("proto: integer overflow")
)
