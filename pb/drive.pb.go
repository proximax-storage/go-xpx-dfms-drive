// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: drive.proto

/*
	Package drive_pb is a generated protocol buffer package.

	It is generated from these files:
		drive.proto

	It has these top-level messages:
		Contract
		Invite
		SContract
*/
package drive_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Contract struct {
	Drive            []byte   `protobuf:"bytes,1,opt,name=drive,proto3" json:"drive,omitempty"`
	Owner            []byte   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Replicators      [][]byte `protobuf:"bytes,3,rep,name=replicators" json:"replicators,omitempty"`
	Root             []byte   `protobuf:"bytes,4,opt,name=root,proto3" json:"root,omitempty"`
	Duration         int64    `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	BillingPrice     int64    `protobuf:"varint,6,opt,name=billingPrice,proto3" json:"billingPrice,omitempty"`
	BillingPeriod    int64    `protobuf:"varint,7,opt,name=billingPeriod,proto3" json:"billingPeriod,omitempty"`
	Created          int64    `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Space            int64    `protobuf:"varint,9,opt,name=space,proto3" json:"space,omitempty"`
	PayedReplicas    uint32   `protobuf:"varint,10,opt,name=payedReplicas,proto3" json:"payedReplicas,omitempty"`
	MinReplicators   uint32   `protobuf:"varint,11,opt,name=minReplicators,proto3" json:"minReplicators,omitempty"`
	PercentApprovers uint32   `protobuf:"varint,12,opt,name=percentApprovers,proto3" json:"percentApprovers,omitempty"`
}

func (m *Contract) Reset()                    { *m = Contract{} }
func (m *Contract) String() string            { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()               {}
func (*Contract) Descriptor() ([]byte, []int) { return fileDescriptorDrive, []int{0} }

func (m *Contract) GetDrive() []byte {
	if m != nil {
		return m.Drive
	}
	return nil
}

func (m *Contract) GetOwner() []byte {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Contract) GetReplicators() [][]byte {
	if m != nil {
		return m.Replicators
	}
	return nil
}

func (m *Contract) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *Contract) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Contract) GetBillingPrice() int64 {
	if m != nil {
		return m.BillingPrice
	}
	return 0
}

func (m *Contract) GetBillingPeriod() int64 {
	if m != nil {
		return m.BillingPeriod
	}
	return 0
}

func (m *Contract) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Contract) GetSpace() int64 {
	if m != nil {
		return m.Space
	}
	return 0
}

func (m *Contract) GetPayedReplicas() uint32 {
	if m != nil {
		return m.PayedReplicas
	}
	return 0
}

func (m *Contract) GetMinReplicators() uint32 {
	if m != nil {
		return m.MinReplicators
	}
	return 0
}

func (m *Contract) GetPercentApprovers() uint32 {
	if m != nil {
		return m.PercentApprovers
	}
	return 0
}

type Invite struct {
	Drive            []byte `protobuf:"bytes,1,opt,name=drive,proto3" json:"drive,omitempty"`
	Owner            []byte `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Duration         int64  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	BillingPrice     int64  `protobuf:"varint,4,opt,name=billingPrice,proto3" json:"billingPrice,omitempty"`
	BillingPeriod    int64  `protobuf:"varint,5,opt,name=billingPeriod,proto3" json:"billingPeriod,omitempty"`
	Space            int64  `protobuf:"varint,6,opt,name=space,proto3" json:"space,omitempty"`
	PayedReplicas    uint32 `protobuf:"varint,7,opt,name=payedReplicas,proto3" json:"payedReplicas,omitempty"`
	MinReplicators   uint32 `protobuf:"varint,8,opt,name=minReplicators,proto3" json:"minReplicators,omitempty"`
	PercentApprovers uint32 `protobuf:"varint,9,opt,name=percentApprovers,proto3" json:"percentApprovers,omitempty"`
}

func (m *Invite) Reset()                    { *m = Invite{} }
func (m *Invite) String() string            { return proto.CompactTextString(m) }
func (*Invite) ProtoMessage()               {}
func (*Invite) Descriptor() ([]byte, []int) { return fileDescriptorDrive, []int{1} }

func (m *Invite) GetDrive() []byte {
	if m != nil {
		return m.Drive
	}
	return nil
}

func (m *Invite) GetOwner() []byte {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Invite) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Invite) GetBillingPrice() int64 {
	if m != nil {
		return m.BillingPrice
	}
	return 0
}

func (m *Invite) GetBillingPeriod() int64 {
	if m != nil {
		return m.BillingPeriod
	}
	return 0
}

func (m *Invite) GetSpace() int64 {
	if m != nil {
		return m.Space
	}
	return 0
}

func (m *Invite) GetPayedReplicas() uint32 {
	if m != nil {
		return m.PayedReplicas
	}
	return 0
}

func (m *Invite) GetMinReplicators() uint32 {
	if m != nil {
		return m.MinReplicators
	}
	return 0
}

func (m *Invite) GetPercentApprovers() uint32 {
	if m != nil {
		return m.PercentApprovers
	}
	return 0
}

type SContract struct {
	Id        []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Drive     []byte   `protobuf:"bytes,2,opt,name=drive,proto3" json:"drive,omitempty"`
	File      []byte   `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	Vmversion uint64   `protobuf:"varint,4,opt,name=vmversion,proto3" json:"vmversion,omitempty"`
	Functions []string `protobuf:"bytes,5,rep,name=functions" json:"functions,omitempty"`
}

func (m *SContract) Reset()                    { *m = SContract{} }
func (m *SContract) String() string            { return proto.CompactTextString(m) }
func (*SContract) ProtoMessage()               {}
func (*SContract) Descriptor() ([]byte, []int) { return fileDescriptorDrive, []int{2} }

func (m *SContract) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SContract) GetDrive() []byte {
	if m != nil {
		return m.Drive
	}
	return nil
}

func (m *SContract) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *SContract) GetVmversion() uint64 {
	if m != nil {
		return m.Vmversion
	}
	return 0
}

func (m *SContract) GetFunctions() []string {
	if m != nil {
		return m.Functions
	}
	return nil
}

func init() {
	proto.RegisterType((*Contract)(nil), "drive_pb.Contract")
	proto.RegisterType((*Invite)(nil), "drive_pb.Invite")
	proto.RegisterType((*SContract)(nil), "drive_pb.SContract")
}
func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Drive) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDrive(dAtA, i, uint64(len(m.Drive)))
		i += copy(dAtA[i:], m.Drive)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDrive(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if len(m.Replicators) > 0 {
		for _, b := range m.Replicators {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDrive(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Root) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDrive(dAtA, i, uint64(len(m.Root)))
		i += copy(dAtA[i:], m.Root)
	}
	if m.Duration != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.Duration))
	}
	if m.BillingPrice != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.BillingPrice))
	}
	if m.BillingPeriod != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.BillingPeriod))
	}
	if m.Created != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.Created))
	}
	if m.Space != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.Space))
	}
	if m.PayedReplicas != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.PayedReplicas))
	}
	if m.MinReplicators != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.MinReplicators))
	}
	if m.PercentApprovers != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.PercentApprovers))
	}
	return i, nil
}

func (m *Invite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Invite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Drive) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDrive(dAtA, i, uint64(len(m.Drive)))
		i += copy(dAtA[i:], m.Drive)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDrive(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if m.Duration != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.Duration))
	}
	if m.BillingPrice != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.BillingPrice))
	}
	if m.BillingPeriod != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.BillingPeriod))
	}
	if m.Space != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.Space))
	}
	if m.PayedReplicas != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.PayedReplicas))
	}
	if m.MinReplicators != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.MinReplicators))
	}
	if m.PercentApprovers != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.PercentApprovers))
	}
	return i, nil
}

func (m *SContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SContract) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDrive(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Drive) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDrive(dAtA, i, uint64(len(m.Drive)))
		i += copy(dAtA[i:], m.Drive)
	}
	if len(m.File) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDrive(dAtA, i, uint64(len(m.File)))
		i += copy(dAtA[i:], m.File)
	}
	if m.Vmversion != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDrive(dAtA, i, uint64(m.Vmversion))
	}
	if len(m.Functions) > 0 {
		for _, s := range m.Functions {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64Drive(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Drive(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDrive(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Contract) Size() (n int) {
	var l int
	_ = l
	l = len(m.Drive)
	if l > 0 {
		n += 1 + l + sovDrive(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovDrive(uint64(l))
	}
	if len(m.Replicators) > 0 {
		for _, b := range m.Replicators {
			l = len(b)
			n += 1 + l + sovDrive(uint64(l))
		}
	}
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovDrive(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovDrive(uint64(m.Duration))
	}
	if m.BillingPrice != 0 {
		n += 1 + sovDrive(uint64(m.BillingPrice))
	}
	if m.BillingPeriod != 0 {
		n += 1 + sovDrive(uint64(m.BillingPeriod))
	}
	if m.Created != 0 {
		n += 1 + sovDrive(uint64(m.Created))
	}
	if m.Space != 0 {
		n += 1 + sovDrive(uint64(m.Space))
	}
	if m.PayedReplicas != 0 {
		n += 1 + sovDrive(uint64(m.PayedReplicas))
	}
	if m.MinReplicators != 0 {
		n += 1 + sovDrive(uint64(m.MinReplicators))
	}
	if m.PercentApprovers != 0 {
		n += 1 + sovDrive(uint64(m.PercentApprovers))
	}
	return n
}

func (m *Invite) Size() (n int) {
	var l int
	_ = l
	l = len(m.Drive)
	if l > 0 {
		n += 1 + l + sovDrive(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovDrive(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovDrive(uint64(m.Duration))
	}
	if m.BillingPrice != 0 {
		n += 1 + sovDrive(uint64(m.BillingPrice))
	}
	if m.BillingPeriod != 0 {
		n += 1 + sovDrive(uint64(m.BillingPeriod))
	}
	if m.Space != 0 {
		n += 1 + sovDrive(uint64(m.Space))
	}
	if m.PayedReplicas != 0 {
		n += 1 + sovDrive(uint64(m.PayedReplicas))
	}
	if m.MinReplicators != 0 {
		n += 1 + sovDrive(uint64(m.MinReplicators))
	}
	if m.PercentApprovers != 0 {
		n += 1 + sovDrive(uint64(m.PercentApprovers))
	}
	return n
}

func (m *SContract) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDrive(uint64(l))
	}
	l = len(m.Drive)
	if l > 0 {
		n += 1 + l + sovDrive(uint64(l))
	}
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovDrive(uint64(l))
	}
	if m.Vmversion != 0 {
		n += 1 + sovDrive(uint64(m.Vmversion))
	}
	if len(m.Functions) > 0 {
		for _, s := range m.Functions {
			l = len(s)
			n += 1 + l + sovDrive(uint64(l))
		}
	}
	return n
}

func sovDrive(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDrive(x uint64) (n int) {
	return sovDrive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDrive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drive", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Drive = append(m.Drive[:0], dAtA[iNdEx:postIndex]...)
			if m.Drive == nil {
				m.Drive = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicators", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replicators = append(m.Replicators, make([]byte, postIndex-iNdEx))
			copy(m.Replicators[len(m.Replicators)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = append(m.Root[:0], dAtA[iNdEx:postIndex]...)
			if m.Root == nil {
				m.Root = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingPrice", wireType)
			}
			m.BillingPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillingPrice |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingPeriod", wireType)
			}
			m.BillingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillingPeriod |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			m.Space = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Space |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayedReplicas", wireType)
			}
			m.PayedReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayedReplicas |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinReplicators", wireType)
			}
			m.MinReplicators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinReplicators |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentApprovers", wireType)
			}
			m.PercentApprovers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PercentApprovers |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDrive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDrive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Invite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDrive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Invite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Invite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drive", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Drive = append(m.Drive[:0], dAtA[iNdEx:postIndex]...)
			if m.Drive == nil {
				m.Drive = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingPrice", wireType)
			}
			m.BillingPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillingPrice |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingPeriod", wireType)
			}
			m.BillingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillingPeriod |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			m.Space = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Space |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayedReplicas", wireType)
			}
			m.PayedReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayedReplicas |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinReplicators", wireType)
			}
			m.MinReplicators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinReplicators |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentApprovers", wireType)
			}
			m.PercentApprovers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PercentApprovers |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDrive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDrive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDrive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drive", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Drive = append(m.Drive[:0], dAtA[iNdEx:postIndex]...)
			if m.Drive == nil {
				m.Drive = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = append(m.File[:0], dAtA[iNdEx:postIndex]...)
			if m.File == nil {
				m.File = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vmversion", wireType)
			}
			m.Vmversion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vmversion |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Functions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDrive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Functions = append(m.Functions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDrive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDrive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDrive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDrive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDrive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDrive
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDrive
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDrive(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDrive = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDrive   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("drive.proto", fileDescriptorDrive) }

var fileDescriptorDrive = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x8e, 0xd3, 0x30,
	0x14, 0x87, 0x71, 0x92, 0xb6, 0xc9, 0x6b, 0x66, 0x34, 0xb2, 0x58, 0x58, 0x23, 0x54, 0x45, 0x15,
	0x42, 0x11, 0x12, 0x33, 0x0b, 0x4e, 0x00, 0xac, 0xd8, 0x21, 0x73, 0x00, 0x94, 0x38, 0x6e, 0xb1,
	0xd4, 0xda, 0x96, 0xe3, 0x04, 0xb1, 0xe4, 0x16, 0x9c, 0x81, 0x93, 0xb0, 0xe4, 0x08, 0xa8, 0x5c,
	0x83, 0x05, 0xf2, 0x0b, 0x6d, 0x53, 0xfe, 0x76, 0x76, 0xef, 0xf7, 0xbd, 0xe7, 0xa7, 0xf8, 0x53,
	0x0c, 0xf3, 0xc6, 0xa9, 0x5e, 0xde, 0x58, 0x67, 0xbc, 0xa1, 0x29, 0x86, 0x37, 0xb6, 0xbe, 0x7e,
	0xb2, 0x56, 0xfe, 0x6d, 0x57, 0xdf, 0x08, 0xb3, 0xbd, 0x5d, 0x9b, 0xb5, 0xb9, 0xc5, 0x81, 0xba,
	0x5b, 0x61, 0xc2, 0x80, 0xd5, 0x70, 0x70, 0xf9, 0x3d, 0x82, 0xf4, 0x85, 0xd1, 0xde, 0x55, 0xc2,
	0xd3, 0xfb, 0x30, 0xc1, 0x3d, 0x8c, 0x14, 0xa4, 0xcc, 0xf9, 0x10, 0x02, 0x35, 0xef, 0xb4, 0x74,
	0x2c, 0x1a, 0x28, 0x06, 0x5a, 0xc0, 0xdc, 0x49, 0xbb, 0x51, 0xa2, 0xf2, 0xc6, 0xb5, 0x2c, 0x2e,
	0xe2, 0x32, 0xe7, 0x63, 0x44, 0x29, 0x24, 0xce, 0x18, 0xcf, 0x12, 0x3c, 0x86, 0x35, 0xbd, 0x86,
	0xb4, 0xe9, 0x5c, 0xe5, 0x95, 0xd1, 0x6c, 0x52, 0x90, 0x32, 0xe6, 0x87, 0x4c, 0x97, 0x90, 0xd7,
	0x6a, 0xb3, 0x51, 0x7a, 0xfd, 0xca, 0x29, 0x21, 0xd9, 0x14, 0xfb, 0x27, 0x8c, 0x3e, 0x84, 0x8b,
	0x7d, 0x96, 0x4e, 0x99, 0x86, 0xcd, 0x70, 0xe8, 0x14, 0x52, 0x06, 0x33, 0xe1, 0x64, 0xe5, 0x65,
	0xc3, 0x52, 0xec, 0xef, 0x63, 0xb8, 0x4b, 0x6b, 0x2b, 0x21, 0x59, 0x86, 0x7c, 0x08, 0x61, 0xab,
	0xad, 0xde, 0xcb, 0x86, 0x0f, 0x5f, 0xdf, 0x32, 0x28, 0x48, 0x79, 0xc1, 0x4f, 0x21, 0x7d, 0x04,
	0x97, 0x5b, 0xa5, 0xf9, 0xe8, 0xd2, 0x73, 0x1c, 0xfb, 0x85, 0xd2, 0xc7, 0x70, 0x65, 0xa5, 0x13,
	0x52, 0xfb, 0x67, 0xd6, 0x3a, 0xd3, 0x4b, 0xd7, 0xb2, 0x1c, 0x27, 0x7f, 0xe3, 0xcb, 0x4f, 0x11,
	0x4c, 0x5f, 0xea, 0x5e, 0x79, 0x79, 0x27, 0xf9, 0x63, 0x8d, 0xf1, 0x7f, 0x34, 0x26, 0xe7, 0x68,
	0x9c, 0xfc, 0x49, 0xe3, 0x41, 0xd6, 0xf4, 0x9f, 0xb2, 0x66, 0xe7, 0xc9, 0x4a, 0xcf, 0x96, 0x95,
	0xfd, 0x45, 0xd6, 0x07, 0x02, 0xd9, 0xeb, 0xc3, 0xcf, 0x7a, 0x09, 0x91, 0x6a, 0x7e, 0xca, 0x8a,
	0x54, 0x73, 0xf4, 0x17, 0x8d, 0xfd, 0x51, 0x48, 0x56, 0x6a, 0x23, 0xd1, 0x52, 0xce, 0xb1, 0xa6,
	0x0f, 0x20, 0xeb, 0xb7, 0x61, 0x63, 0xd0, 0x17, 0xf4, 0x24, 0xfc, 0x08, 0x42, 0x77, 0xd5, 0x69,
	0x11, 0x5c, 0xb6, 0x6c, 0x52, 0xc4, 0x65, 0xc6, 0x8f, 0xe0, 0xf9, 0xd5, 0xe7, 0xdd, 0x82, 0x7c,
	0xd9, 0x2d, 0xc8, 0xd7, 0xdd, 0x82, 0x7c, 0xfc, 0xb6, 0xb8, 0x57, 0x4f, 0xf1, 0x21, 0x3d, 0xfd,
	0x11, 0x00, 0x00, 0xff, 0xff, 0x46, 0xa8, 0x5f, 0x91, 0x90, 0x03, 0x00, 0x00,
}
